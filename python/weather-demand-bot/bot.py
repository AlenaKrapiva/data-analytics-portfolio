# bot.py ‚Äî –ü–æ–≥–æ–¥–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–ø—Ä–æ—Å–∞
import os, csv, requests, pandas as pd
from io import BytesIO
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
load_dotenv()


TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")                 
OWM_KEY = os.getenv("OPENWEATHER_KEY")         
TZ_OFFSET_MIN = int(os.getenv("TZ_OFFSET_MIN", "0"))
ALERT_THRESHOLD = int(os.getenv("ALERT_THRESHOLD", "80"))


def clamp(x, a=0.0, b=1.0): return max(a, min(b, x))
def now_local(): return datetime.now() + timedelta(minutes=TZ_OFFSET_MIN)

def load_stores():
    with open("stores.csv", encoding="utf-8") as f:
        rdr = csv.DictReader(f)
        rows = []
        for i, r in enumerate(rdr, start=2):
            name = (r.get("name") or "").strip()
            area = (r.get("area") or "").strip()
            lat = float((r.get("lat") or "").strip())
            lon = float((r.get("lon") or "").strip())
            rows.append((name, area, lat, lon))
        return rows 

def fetch_weather(lat, lon):
    url = "https://api.openweathermap.org/data/2.5/weather"
    r = requests.get(url, params={"lat": lat, "lon": lon, "appid": OWM_KEY, "units":"metric", "lang":"ru"}, timeout=12)
    r.raise_for_status()
    j = r.json()
    return {
        "temp_c": float(j["main"]["temp"]),
        "wind_mps": float(j.get("wind", {}).get("speed", 0.0)),
        "clouds": float(j.get("clouds", {}).get("all", 0.0)),
        "rain_mm": float((j.get("rain") or {}).get("1h", (j.get("rain") or {}).get("3h", 0.0))),
        "desc": j["weather"][0]["description"] if j.get("weather") else ""
    }

def demand_index(w, ts):
    temp_score  = clamp((15 - w["temp_c"]) / 20.0)
    rain_score  = clamp(w["rain_mm"] / 3.0)
    wind_score  = clamp(w["wind_mps"] / 10.0)
    cloud_score = clamp(w["clouds"] / 100.0)
    weekend_bonus = 0.10 if ts.weekday() >= 5 else 0.0
    return round(100 * clamp(0.5*temp_score + 0.3*rain_score + 0.2*wind_score + 0.2*cloud_score + weekend_bonus))

def action_hint(idx):
    if idx >= 80: return "üü¢ —É—Å–∏–ª–∏—Ç—å —Å–º–µ–Ω—É/–∫—É—Ä—å–µ—Ä–æ–≤, –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–º–æ"
    if idx >= 65: return "üü° –±—ã—Ç—å –≥–æ—Ç–æ–≤—ã–º–∏, –ø—É—à–∏/—Ç–µ–ª–µ–≥–∞"
    if idx >= 50: return "‚ö™ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
    return "üîµ —ç–∫–æ–Ω–æ–º-—Ä–µ–∂–∏–º –∑–∞–∫—É–ø–æ–∫/—à—Ç–∞—Ç–∞"

def build_df():
    ts = now_local()
    rows = []
    for name, area, lat, lon in load_stores():   # ‚Üê 4 –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        w = fetch_weather(lat, lon)
        idx = demand_index(w, ts)
        rows.append({
            "store": name,
            "area": area,                         # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞
            "dt": ts.strftime("%Y-%m-%d %H:%M"),
            "temp_c": w["temp_c"],
            "rain_mm": w["rain_mm"],
            "wind_mps": w["wind_mps"],
            "clouds_pct": w["clouds"],
            "weekend": "yes" if ts.weekday() >= 5 else "no",
            "demand_index": idx,
            "action_hint": action_hint(idx),
            "desc": w["desc"],
        })
    return pd.DataFrame(rows).sort_values(["demand_index","store"], ascending=[False, True])

def build_df_by_area():
    df = build_df()
    if "area" not in df.columns or df["area"].eq("").all():
        return pd.DataFrame()  
    g = df.groupby("area", as_index=False).agg({
        "dt":           "first",
        "temp_c":       "mean",
        "rain_mm":      "mean",
        "wind_mps":     "mean",
        "clouds_pct":   "mean",
        "demand_index": "mean",
    })
    g["demand_index"] = g["demand_index"].round().astype(int)
    g["action_hint"]  = g["demand_index"].apply(action_hint)
    return (g.rename(columns={"area": "store"})
            .sort_values(["demand_index", "store"], ascending=[False, True]))


def to_excel(df: pd.DataFrame, sheet_name: str = "demand_now") -> BytesIO:
    bio = BytesIO()
    with pd.ExcelWriter(bio, engine="openpyxl") as w:
        df.to_excel(w, index=False, sheet_name=sheet_name)  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ª–∏—Å—Ç–∞
        pd.DataFrame({
            "metric": ["temp_score","rain_score","wind_score","cloud_score","weekend_bonus","index_range"],
            "note":   ["=(15-T)/20","=rain/3","=wind/10","=clouds/100","+0.10 Sat/Sun","0..100 (–≤—ã—à–µ ‚Äî —Å–ø—Ä–æ—Å –≤—ã—à–µ)"]
        }).to_excel(w, index=False, sheet_name="method")
    bio.seek(0)
    return bio


async def send_excel_to(chat_id, context):
    df = build_df()

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏–Ω–¥–µ–∫—Å–µ 
    high = df[df["demand_index"] >= ALERT_THRESHOLD]
    if not high.empty:
        lines = "\n".join(f"‚Ä¢ {r.store} ‚Äî {r.demand_index}" for r in high.itertuples())
        await context.bot.send_message(
            chat_id=int(chat_id),
            text=f"üî• –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å (‚â•{ALERT_THRESHOLD}):\n{lines}"
        )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ Excel 
    excel = to_excel(df)
    fname = f"demand_index_{now_local().strftime('%Y%m%d_%H%M')}.xlsx"
    caption = f"–ò–Ω–¥–µ–∫—Å —Å–ø—Ä–æ—Å–∞ –ø–æ —Ç–æ—á–∫–∞–º ‚Äî {now_local().strftime('%d.%m %H:%M')}"
    await context.bot.send_document(
        chat_id=int(chat_id),
        document=excel,
        filename=fname,
        caption=caption
    )

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! /id ‚Äî chat_id, /now ‚Äî –ø—Ä–∏—à–ª—é Excel —Å—é–¥–∞.")

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"chat_id: {update.effective_chat.id}")

async def cmd_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_excel_to(update.effective_chat.id, context)

async def cmd_now_areas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—Ç—Ä–æ–∏–º —Å–≤–æ–¥–∫—É –ø–æ –æ–∫—Ä—É–≥–∞–º
    df = build_df_by_area()
    if df.empty:
        await update.message.reply_text("–ù–µ—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –æ–∫—Ä—É–≥–∞–º: –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤ stores.csv –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ 'area'.")
        return

    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –ø–æ –ø–æ—Ä–æ–≥—É
    high = df[df["demand_index"] >= ALERT_THRESHOLD]
    if not high.empty:
        lines = "\n".join(f"‚Ä¢ {r.store} ‚Äî {r.demand_index}" for r in high.itertuples())
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üî• –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å (‚â•{ALERT_THRESHOLD}) –ø–æ –æ–∫—Ä—É–≥–∞–º:\n{lines}"
        )

    # Excel —Å–æ —Å–≤–æ–¥–∫–æ–π –ø–æ –æ–∫—Ä—É–≥–∞–º
    excel = to_excel(df, sheet_name="areas_now")   # –≤–∞–∂–Ω–æ: –ª–∏—Å—Ç 'areas_now'
    fname = f"areas_{now_local().strftime('%Y%m%d_%H%M')}.xlsx"
    caption = f"–ò–Ω–¥–µ–∫—Å —Å–ø—Ä–æ—Å–∞ –ø–æ –æ–∫—Ä—É–≥–∞–º ‚Äî {now_local().strftime('%d.%m %H:%M')}"

    await context.bot.send_document(
        chat_id=update.effective_chat.id,
        document=excel,
        filename=fname,
        caption=caption,
    )
 
async def job_send(context: ContextTypes.DEFAULT_TYPE):
    if CHAT_ID: await send_excel_to(CHAT_ID, context)

def main():
    assert TOKEN, "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN"
    assert OWM_KEY, "–ù—É–∂–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è OPENWEATHER_KEY"
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("now", cmd_now))
    app.add_handler(CommandHandler("now_areas", cmd_now_areas))
    app.job_queue.run_repeating(job_send, interval=3600, first=60)
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
